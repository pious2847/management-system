<!DOCTYPE html>
<html lang="en">
<%- include('./layouts/header') %>

    <body>
        <%- include('./popups/alert') %>

            <div class="container-fluid">
                <div class="row">
                    <%- include('./layouts/sidebar') %>
                        <!-- Mobile Overlay -->
                        <div class="mobile-overlay"></div>
                        <div class="main-content p-3">
                            <%- include('./layouts/topnav') %>

                                <div class="content-wrapper my-5">
                                    <div
                                        class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                                        <h1 class="h2">Finance Management</h1>
                                        <div class="btn-toolbar mb-2 mb-md-0 ">
                                            <button type="button" class="btn btn-primary me-2" data-bs-toggle="modal"
                                                data-bs-target="#addTransactionModal">
                                                Add Transaction
                                            </button>
                                            <p class="mb-0 text-muted "></p>
                                            <div class="btn-group me-2 ">
                                                <button type="button" id="exportButton"
                                                    class="btn btn-outline-secondary">Export CSV</button>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Finance Chart -->
                                    <div class="row mb-4">
                                        <div class="col-12">
                                            <div class="card">
                                                <div class="card-body">
                                                    <canvas id="financeChart"></canvas>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Finance Summary -->
                                    <div class="row mb-4">
                                        <div class="col-md-4">
                                            <div class="card text-white bg-success">
                                                <div class="card-body">
                                                    <h5 class="card-title">Total Income</h5>
                                                    <h3 class="card-text">₵<span id="totalIncome">0</span></h3>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="card text-white bg-danger">
                                                <div class="card-body">
                                                    <h5 class="card-title">Total Expenses</h5>
                                                    <h3 class="card-text">₵<span id="totalExpenses">0</span></h3>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="card text-white bg-primary">
                                                <div class="card-body">
                                                    <h5 class="card-title">Net Balance</h5>
                                                    <h3 class="card-text">₵<span id="netBalance">0</span></h3>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Transactions Table -->
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Type</th>
                                                    <th>Amount</th>
                                                    <th>Description</th>
                                                    <th>Date</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody id="transactionsTableBody">
                                                <% transactions.forEach(transaction=> { %>
                                                    <tr
                                                        class="<%= transaction.transactionType === 'income' ? 'table-success' : 'table-danger' %>">
                                                        <td>
                                                            <%= transaction.transactionType.charAt(0).toUpperCase() +
                                                                transaction.transactionType.slice(1) %>
                                                        </td>
                                                        <td>₵<%= transaction.amount %>
                                                        </td>
                                                        <td>
                                                            <%= transaction.description %>
                                                        </td>
                                                        <td>
                                                            <%= new
                                                                Date(transaction.transactionDate).toLocaleDateString()
                                                                %>
                                                        </td>
                                                        <td>
                                                            <div class="d-flex gap-2">
                                                                <button class="btn btn-sm btn-info edit-transaction"
                                                                    data-transaction-id="<%= transaction._id %>"
                                                                    data-type="<%= transaction.transactionType %>"
                                                                    data-category="<%= transaction.category %>"
                                                                    data-amount="<%= transaction.amount %>"
                                                                    data-description="<%= transaction.description %>"
                                                                    data-bs-toggle="modal"
                                                                    data-bs-target="#editTransactionModal">
                                                                    <i class='bx bx-edit-alt'></i>
                                                                </button>
                                                                <button class="btn btn-sm btn-danger delete-transaction"
                                                                    data-transaction-id="<%= transaction._id %>"
                                                                    data-bs-toggle="modal"
                                                                    data-bs-target="#deleteTransactionModal">
                                                                    <i class='bx bx-trash'></i>
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                    <% }); %>
                                            </tbody>
                                        </table>
                                    </div>

                                </div>
                        </div>
                </div>
            </div>
            </div>
            <!-- Add Transaction Modal -->
            <div class="modal fade" id="addTransactionModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Add New Transaction</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <form action="/api/finance/create" method="POST">
                            <div class="modal-body">
                                <div class="mb-3">
                                    <label for="transactionType" class="form-label">Transaction Type</label>
                                    <select class="form-control" id="transactionType" name="transactionType" required>
                                        <option value="income">Income</option>
                                        <option value="expense">Expense</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="category" class="form-label">Category</label>
                                    <select class="form-control" id="category" name="category" required>
                                        <option value="sales">Sales</option>
                                        <option value="supplies">Supplies</option>
                                        <option value="salary">Salary</option>
                                        <option value="maintenance">Maintenance</option>
                                        <option value="other">Other</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="amount" class="form-label">Amount</label>
                                    <div class="input-group">
                                        <span class="input-group-text">₵</span>
                                        <input type="number" class="form-control" id="amount" name="amount" step="0.01"
                                            min="0.01" required>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="description" class="form-label">Description</label>
                                    <textarea class="form-control" id="description" name="description"
                                        required></textarea>
                                </div>
                                <div class="mb-3">
                                    <label for="transactionDate" class="form-label">Transaction Date</label>
                                    <input type="date" class="form-control" id="transactionDate" name="transactionDate"
                                        value="<%= new Date().toISOString().split('T')[0] %>" required>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-primary">Create Transaction</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Edit Transaction Modal -->
            <div class="modal fade" id="editTransactionModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Edit Transaction</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <form id="editTransactionForm" method="POST">
                            <div class="modal-body">
                                <input type="hidden" id="editTransactionId" name="transactionId">
                                <div class="mb-3">
                                    <label for="editTransactionType" class="form-label">Transaction Type</label>
                                    <select class="form-control" id="editTransactionType" name="transactionType"
                                        required>
                                        <option value="income">Income</option>
                                        <option value="expense">Expense</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="editCategory" class="form-label">Category</label>
                                    <select class="form-control" id="editCategory" name="category" required>
                                        <option value="sales">Sales</option>
                                        <option value="supplies">Supplies</option>
                                        <option value="salary">Salary</option>
                                        <option value="maintenance">Maintenance</option>
                                        <option value="other">Other</option>
                                    </select>
                                </div>
                                <div class="mb-3">
                                    <label for="editAmount" class="form-label">Amount</label>
                                    <div class="input-group">
                                        <span class="input-group-text">₵</span>
                                        <input type="number" class="form-control" id="editAmount" name="amount"
                                            step="0.01" min="0.01" required>
                                    </div>
                                </div>
                                <div class="mb-3">
                                    <label for="editDescription" class="form-label">Description</label>
                                    <textarea class="form-control" id="editDescription" name="description"
                                        required></textarea>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-primary">Update Transaction</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Delete Transaction Modal -->
            <div class="modal fade" id="deleteTransactionModal" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Delete Transaction</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete this transaction? This action cannot be undone.</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-danger" id="confirmDeleteTransaction">Delete</button>
                        </div>
                    </div>
                </div>
            </div>

            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            <script>
                function exportToCSV() {
                    // Get all transactions from the table
                    const table = document.getElementById('transactionsTableBody');
                    const rows = table.getElementsByTagName('tr');

                    // Create CSV header
                    let csvContent = "Type,Amount,Description,Date\n";

                    // Add each row to CSV content
                    for (let row of rows) {
                        const type = row.cells[0].textContent.trim();
                        const amount = row.cells[1].textContent.trim().replace('₵', '');
                        const description = row.cells[2].textContent.trim();
                        const date = row.cells[3].textContent.trim();

                        // Escape description field if it contains commas
                        const escapedDescription = description.includes(',') ? `"${description}"` : description;

                        // Add row to CSV content
                        csvContent += `${type},${amount},${escapedDescription},${date}\n`;
                    }

                    // Create blob and download
                    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
                    const link = document.createElement('a');

                    // Create download link
                    if (navigator.msSaveBlob) { // IE 10+
                        navigator.msSaveBlob(blob, 'finance_report.csv');
                    } else {
                        const url = URL.createObjectURL(blob);
                        link.href = url;
                        link.download = 'finance_report.csv';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        URL.revokeObjectURL(url);
                    }
                }

                document.addEventListener('DOMContentLoaded', function () {
                    // Initialize Finance Chart
                    const ctx = document.getElementById('financeChart').getContext('2d');
                    const financeChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: [],
                            datasets: [
                                {
                                    label: 'Income',
                                    borderColor: 'rgb(40, 167, 69)',
                                    data: []
                                },
                                {
                                    label: 'Expenses',
                                    borderColor: 'rgb(220, 53, 69)',
                                    data: []
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            scales: {
                                y: {
                                    beginAtZero: true
                                },
                                

                            }
                        }
                    });

                    // Update Finance Summary
                    function updateFinanceSummary() {
                        let totalIncome = 0;
                        let totalExpenses = 0;

                        document.querySelectorAll('#transactionsTableBody tr').forEach(row => {
                            const amount = parseFloat(row.cells[1].textContent.replace('₵', ''));
                            if (row.cells[0].textContent.trim() === 'Income') {
                                totalIncome += amount;
                            } else {
                                totalExpenses += amount;
                            }
                        });

                        document.getElementById('totalIncome').textContent = totalIncome.toFixed(2);
                        document.getElementById('totalExpenses').textContent = totalExpenses.toFixed(2);
                        document.getElementById('netBalance').textContent = (totalIncome - totalExpenses).toFixed(2);
                    }

                    // Update Chart Data
                    function updateChartData() {
                        const transactions = [];
                        document.querySelectorAll('#transactionsTableBody tr').forEach(row => {
                            transactions.push({
                                type: row.cells[0].textContent.trim(),
                                amount: parseFloat(row.cells[1].textContent.replace('₵', '')),
                                date: row.cells[3].textContent
                            });
                        });

                        // Sort transactions by date
                        transactions.sort((a, b) => new Date(a.date) - new Date(b.date));

                        // Prepare chart data
                        const labels = transactions.map(t => t.date);
                        const incomeData = transactions.map(t => t.type === 'Income' ? t.amount : 0);
                        const expenseData = transactions.map(t => t.type === 'Expense' ? t.amount : 0);

                        financeChart.data.labels = labels;
                        financeChart.data.datasets[0].data = incomeData;
                        financeChart.data.datasets[1].data = expenseData;
                        financeChart.update();
                    }

                    // Initialize summary and chart
                    updateFinanceSummary();
                    updateChartData();
                    const exportButton = document.getElementById('exportButton');
                    if (exportButton) {
                        exportButton.removeAttribute('onclick');
                        exportButton.addEventListener('click', exportToCSV);
                    }
                    // Add Transaction Form Submission
                    document.getElementById('addTransactionForm').addEventListener('submit', async function (e) {
                        e.preventDefault();
                        const formData = new FormData(this);
                        const data = Object.fromEntries(formData.entries());

                        try {
                            const response = await fetch('/api/finance', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(data)
                            });

                            if (response.ok) {
                                window.location.reload();
                            } else {
                                alert('Error adding transaction');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                        }
                    });

                    // Delete Transaction
                    document.querySelectorAll('.delete-transaction').forEach(button => {
                        button.addEventListener('click', async function () {
                            if (confirm('Are you sure you want to delete this transaction?')) {
                                const transactionId = this.dataset.id;
                                try {
                                    const response = await fetch(`/api/finance/${transactionId}`, {
                                        method: 'DELETE'
                                    });

                                    if (response.ok) {
                                        window.location.reload();
                                    } else {
                                        alert('Error deleting transaction');
                                    }
                                } catch (error) {
                                    console.error('Error:', error);
                                }
                            }
                        });
                    });

                    // Edit Transaction
                    document.querySelectorAll('.edit-transaction').forEach(button => {
                        button.addEventListener('click', async function () {
                            const transactionId = button.dataset.id;
                            try {
                                const response = await fetch(`/api/finance/${transactionId}`);
                                const transaction = await response.json();

                                const form = document.getElementById('editTransactionForm');
                                form.transactionId.value = transaction._id;
                                form.transactionType.value = transaction.transactionType;
                                form.amount.value = transaction.amount;
                                form.description.value = transaction.description;

                                new bootstrap.Modal(document.getElementById('editTransactionModal')).show();
                            } catch (error) {
                                console.error('Error:', error);
                            }
                        });
                    });

                    // Edit Transaction Form Submission
                    document.getElementById('editTransactionForm').addEventListener('submit', async function (e) {
                        e.preventDefault();
                        const formData = new FormData(this);
                        const data = Object.fromEntries(formData.entries());
                        const transactionId = data.transactionId;
                        delete data.transactionId;

                        try {
                            const response = await fetch(`/api/finance/${transactionId}`, {
                                method: 'PUT',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(data)
                            });

                            if (response.ok) {
                                window.location.reload();
                            } else {
                                alert('Error updating transaction');
                            }
                        } catch (error) {
                            console.error('Error:', error);
                        }
                    });

                    // document.getElementById('exportButton').addEventListener('click', async function () {
                    //     console.log('Exporting data...');
                    //     try {
                    //         const response = await fetch('/api/finance/export');
                    //         const blob = await response.blob();
                    //         const url = window.URL.createObjectURL(blob);
                    //         const a = document.createElement('a');
                    //         a.href = url;
                    //         a.download = 'finance_report.csv';
                    //         document.body.appendChild(a);
                    //         a.click();
                    //         window.URL.revokeObjectURL(url);
                    //     } catch (error) {
                    //         console.error('Error:', error);
                    //         alert('Error exporting data');
                    //     }
                    // });
                    // // // Export to CSV
                    // // window.exportToCSV = 

                    // Handle edit transaction
                    
                    
                    const editButtons = document.querySelectorAll('.edit-transaction');
                    editButtons.forEach(button => {
                        button.addEventListener('click', () => {
                            const transactionId = button.dataset.transactionId;
                            const type = button.dataset.type;
                            const category = button.dataset.category;
                            const amount = button.dataset.amount;
                            const description = button.dataset.description;

                            document.getElementById('editTransactionId').value = transactionId;
                            document.getElementById('editTransactionType').value = type;
                            document.getElementById('editCategory').value = category;
                            document.getElementById('editAmount').value = amount;
                            document.getElementById('editDescription').value = description;

                            // Update form action
                            const editForm = document.getElementById('editTransactionForm');
                            editForm.action = `/api/finance/${transactionId}?_method=PUT`;
                        });
                    });

                    // Handle delete transaction
                    const deleteButtons = document.querySelectorAll('.delete-transaction');
                    const confirmDeleteButton = document.getElementById('confirmDeleteTransaction');
                    let transactionToDelete = null;

                    deleteButtons.forEach(button => {
                        button.addEventListener('click', () => {
                            transactionToDelete = button.dataset.transactionId;
                        });
                    });

                    confirmDeleteButton.addEventListener('click', () => {
                        if (transactionToDelete) {
                            const form = document.createElement('form');
                            form.method = 'POST';
                            form.action = `/api/finance/${transactionToDelete}?_method=DELETE`;
                            document.body.appendChild(form);
                            form.submit();
                        }
                    });

                    // Update category options based on transaction type
                    const updateCategoryOptions = (typeSelect, categorySelect) => {
                        const type = typeSelect.value;
                        const categories = type === 'income'
                            ? ['sales', 'other']
                            : ['supplies', 'salary', 'maintenance', 'other'];

                        categorySelect.innerHTML = categories.map(cat =>
                            `<option value="${cat}">${cat.charAt(0).toUpperCase() + cat.slice(1)}</option>`
                        ).join('');
                    };

                    const typeSelects = ['transactionType', 'editTransactionType'];
                    const categorySelects = ['category', 'editCategory'];

                    typeSelects.forEach((typeId, index) => {
                        const typeSelect = document.getElementById(typeId);
                        const categorySelect = document.getElementById(categorySelects[index]);

                        typeSelect.addEventListener('change', () => {
                            updateCategoryOptions(typeSelect, categorySelect);
                        });
                    });
                });
            </script>

            <%- include('layouts/footer') %>

    </body>

</html>